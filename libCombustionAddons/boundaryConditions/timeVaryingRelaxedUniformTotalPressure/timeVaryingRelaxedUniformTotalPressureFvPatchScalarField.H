/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    Foam::timeVaryingRelaxedUniformTotalPressureFvPatchScalarField

Description
    A time-varying form of a uniform total pressure boundary condition.

See Also
    Foam::timeVaryingUniformFixedValueFvPatchField
    and Foam::totalPressureFvPatchScalarField.H

SourceFiles
    timeVaryingRelaxedUniformTotalPressureFvPatchScalarField.C

\*---------------------------------------------------------------------------*/

#ifndef timeVaryingRelaxedUniformTotalPressureFvPatchScalarField_H
#define timeVaryingRelaxedUniformTotalPressureFvPatchScalarField_H

#include "fixedValueFvPatchFields.H"
#include "interpolationTable.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
               Class timeVaryingTotalPressureFvPatch Declaration
\*---------------------------------------------------------------------------*/

class timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
:
    public fixedValueFvPatchScalarField
{
    // Private data

        //- Name of the velocity field
        word UName_;

        //- Name of the flux transporting the field
        word phiName_;

        //- Name of the density field used to normalise the mass flux
        //  if neccessary
        word rhoName_;

        //- Name of the compressibility field used to calculate the wave speed
        word psiName_;

        //- Heat capacity ratio
        scalar gamma_;

        //- Total pressure
        scalar p0_;

        //- Table of time vs total pressure, including the bounding treatment
        interpolationTable<scalar> timeSeries_;

        scalar relax_;

public:

    //- Runtime type information
    TypeName("timeVaryingRelaxedUniformTotalPressure");


    // Constructors

        //- Construct from patch and internal field
        timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct from patch, internal field and dictionary
        timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
        (
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const dictionary&
        );

        //- Construct by mapping given patch field onto a new patch
        timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
        (
            const timeVaryingRelaxedUniformTotalPressureFvPatchScalarField&,
            const fvPatch&,
            const DimensionedField<scalar, volMesh>&,
            const fvPatchFieldMapper&
        );

        //- Construct as copy
        timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
        (
            const timeVaryingRelaxedUniformTotalPressureFvPatchScalarField&
        );

        //- Construct and return a clone
        virtual tmp<fvPatchScalarField> clone() const
        {
            return tmp<fvPatchScalarField>
            (
                new timeVaryingRelaxedUniformTotalPressureFvPatchScalarField(*this)
            );
        }

        //- Construct as copy setting internal field reference
        timeVaryingRelaxedUniformTotalPressureFvPatchScalarField
        (
            const timeVaryingRelaxedUniformTotalPressureFvPatchScalarField&,
            const DimensionedField<scalar, volMesh>&
        );

        //- Construct and return a clone setting internal field reference
        virtual tmp<fvPatchScalarField> clone
        (
            const DimensionedField<scalar, volMesh>& iF
        ) const
        {
            return tmp<fvPatchScalarField>
            (
                new timeVaryingRelaxedUniformTotalPressureFvPatchScalarField(*this, iF)
            );
        }


    // Member functions

        // Access

            //- Return the name of the velocity field
            const word& UName() const
            {
                return UName_;
            }

            //- Return reference to the name of the velocity field
            //  to allow adjustment
            word& UName()
            {
                return UName_;
            }

            //- Return the heat capacity ratio
            scalar gamma() const
            {
                return gamma_;
            }

            //- Return reference to the heat capacity ratio to allow adjustment
            scalar& gamma()
            {
                return gamma_;
            }

            //- Return the total pressure
            scalar p0() const
            {
                return p0_;
            }

            //- Return reference to the total pressure to allow adjustment
            scalar p0()
            {
                return p0_;
            }

            //- Return the time series used
            const interpolationTable<scalar>& totalPressureTimeSeries() const
            {
                return timeSeries_;
            }


        // Evaluation functions

            //- Update the coefficients associated with the patch field
            //  using the given patch velocity field
            virtual void updateCoeffs(const vectorField& Up);

            //- Update the coefficients associated with the patch field
            virtual void updateCoeffs();


        //- Write
        virtual void write(Ostream&) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
